/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.dux.technicaltest.api;

import java.util.List;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.dux.technicaltest.model.EquipoRequest;
import com.dux.technicaltest.model.EquipoResponse;
import com.dux.technicaltest.model.ErrorResponse;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "equipos", description = "Operaciones sobre equipos")
@RequestMapping("${openapi.dux.base-path:}")
public interface EquiposApi {

    /**
     * POST /equipos : Creación de un equipo
     * Creación de un nuevo equipo
     *
     * @param equipoRequest  (required)
     * @return Equipo creado (status code 201)
     *         or Solicitud invalida (status code 400)
     */
    @Operation(
        operationId = "createEquipo",
        summary = "Creación de un equipo",
        description = "Creación de un nuevo equipo",
        tags = { "equipos" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Equipo creado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EquipoResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Solicitud invalida", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/equipos",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<EquipoResponse> createEquipo(
        @Parameter(name = "EquipoRequest", description = "", required = true) @Valid @RequestBody EquipoRequest equipoRequest
    );


    /**
     * DELETE /equipos/{id} : Eliminación de un equipo
     * Eliminación de un equipo por su ID
     *
     * @param id id (required)
     * @return Equipo eliminado (status code 204)
     *         or Equipo no encontrado (status code 404)
     */
    @Operation(
        operationId = "deleteEquipo",
        summary = "Eliminación de un equipo",
        description = "Eliminación de un equipo por su ID",
        tags = { "equipos" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Equipo eliminado"),
            @ApiResponse(responseCode = "404", description = "Equipo no encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/equipos/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Void> deleteEquipo(
        @Parameter(name = "id", description = "id", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /equipos/{id} : Consulta de un equipo por ID
     * Consulta de un equipo a traves de su ID
     *
     * @param id id (required)
     * @return Equipo encontrado (status code 200)
     *         or Equipo no encontrado (status code 404)
     */
    @Operation(
        operationId = "getEquipoById",
        summary = "Consulta de un equipo por ID",
        description = "Consulta de un equipo a traves de su ID",
        tags = { "equipos" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Equipo encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EquipoResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Equipo no encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/equipos/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<EquipoResponse> getEquipoById(
        @Parameter(name = "id", description = "id", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    );


    /**
     * GET /equipos : Consulta de todos los equipos
     * Consulta un listado de todos los equipos
     *
     * @return Listado de equipos (status code 200)
     */
    @Operation(
        operationId = "getEquipos",
        summary = "Consulta de todos los equipos",
        description = "Consulta un listado de todos los equipos",
        tags = { "equipos" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Listado de equipos", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = EquipoResponse.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/equipos",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<EquipoResponse>> getEquipos(
        
    );


    /**
     * GET /equipos/buscar : Búsqueda de equipos por nombre
     * Búsqueda de equipos por nombre
     *
     * @param nombre Nombre del equipo a buscar (required)
     * @return Lista de equipos encontrados (status code 200)
     */
    @Operation(
        operationId = "getEquiposByNombre",
        summary = "Búsqueda de equipos por nombre",
        description = "Búsqueda de equipos por nombre",
        tags = { "equipos" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de equipos encontrados", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = EquipoResponse.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/equipos/buscar",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<EquipoResponse>> getEquiposByNombre(
        @NotNull @Parameter(name = "nombre", description = "Nombre del equipo a buscar", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "nombre", required = true) String nombre
    );


    /**
     * PUT /equipos/{id} : Actualización de informacion de un equipo
     * Actualización de informacion de un equipo por su ID
     *
     * @param id id (required)
     * @param equipoRequest  (required)
     * @return Equipo actualizado (status code 200)
     *         or Equipo no encontrado (status code 404)
     */
    @Operation(
        operationId = "updateEquipo",
        summary = "Actualización de informacion de un equipo",
        description = "Actualización de informacion de un equipo por su ID",
        tags = { "equipos" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Equipo actualizado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EquipoResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Equipo no encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/equipos/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<EquipoResponse> updateEquipo(
        @Parameter(name = "id", description = "id", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "EquipoRequest", description = "", required = true) @Valid @RequestBody EquipoRequest equipoRequest
    );

}
